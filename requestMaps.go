package main

import (
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
)

func requestMaps(client Clients) (lat, long float64, err error) {
	u, _ := url.Parse(apiUrl)

	values := url.Values{}
	values.Add("address", client.Endereco+""+client.Numero+","+client.Bairro+","+client.Cep+","+client.Pais+","+client.Cidade)
	values.Add("key", key)
	u.RawQuery = values.Encode()

	// Parse(apiUrl + endereco + key) // func Felipe
	var rsp *AutoGenerated
	// urli := strings.ReplaceAll(apiUrl+endereco+key, " ", "")
	req, _ := http.Get(u.String())
	json.NewDecoder(req.Body).Decode(&rsp)

	if rsp.Status != "OK" || len(rsp.Results) < 1 {
		fmt.Println("localização inválida", rsp.Status)
		err = fmt.Errorf("google api: %s", rsp.Status)
		return
	}

	lat = rsp.Results[0].Geometry.Location.Lat
	long = rsp.Results[0].Geometry.Location.Lng
	fmt.Println(values.Encode(), lat, long)
	return
}
func requestMapsNewclient(client Street) (lat, long float64) {
	u, _ := url.Parse(apiUrl)

	values := url.Values{}
	values.Add("address", client.Endereco+","+client.Bairro+","+client.Cep+","+client.Pais+","+client.Cidade)
	values.Add("key", key)
	u.RawQuery = values.Encode()

	// Parse(apiUrl + endereco + key) // func Felipe
	var rsp *AutoGenerated
	// urli := strings.ReplaceAll(apiUrl+endereco+key, " ", "")
	req, _ := http.Get(u.String())
	json.NewDecoder(req.Body).Decode(&rsp)

	if rsp.Status != "OK" || len(rsp.Results) < 1 {
		fmt.Println("localização inválida", rsp.Status)
		//err = fmt.Errorf("google api: %s", rsp.Status)
		return
	}

	lat = rsp.Results[0].Geometry.Location.Lat
	long = rsp.Results[0].Geometry.Location.Lng
	fmt.Println(values.Encode(), lat, long)
	return
}
