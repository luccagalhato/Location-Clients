package maps

import (
	"GoogleMAPS/models"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
)

const apiUrl = "https://maps.googleapis.com/maps/api/geocode/json"
const key = "AIzaSyAwKYUmAF6wk9oDhcQ-mByOebz39KLmIL4"

// RequestMapsNewclient ...
func RequestMapsNewclient(client models.Street) (lat, long float64, err error) {
	u, _ := url.Parse(apiUrl)

	values := url.Values{}
	values.Add("address", client.Endereco+", "+client.Bairro+", CEP"+client.Cep+", "+", "+client.Cidade+"-"+client.Uf+", "+client.Pais)
	values.Add("key", key)
	u.RawQuery = values.Encode()

	// Parse(apiUrl + endereco + key) // func Felipe
	var rsp *models.AutoGenerated
	// urli := strings.ReplaceAll(apiUrl+endereco+key, " ", "")
	fmt.Println(u.String())
	req, err := http.Get(u.String())
	json.NewDecoder(req.Body).Decode(&rsp)

	if rsp.Status != "OK" || len(rsp.Results) < 1 {
		err = fmt.Errorf("google api: %s", rsp.Status)
		return
	}

	lat = rsp.Results[0].Geometry.Location.Lat
	long = rsp.Results[0].Geometry.Location.Lng
	//fmt.Println(values.Encode(), lat, long)
	return
}

// RequestMapsNewclientRoutine ...
func RequestMapsNewclientRoutine(client models.Client) (lat, long float64, err error) {
	add := models.Street{
		Endereco: client.Endereco,
		Numero:   client.Numero,
		Bairro:   client.Bairro,
		Cidade:   client.Cidade,
		Uf:       client.Uf,
		Cep:      client.Cep,
		Pais:     client.Pais,
	}

	return RequestMapsNewclient(add)
}
